"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const enums_1 = require("./common/enums");
const store_1 = require("./context/store");
const luxon_1 = require("luxon");
const calendarDays_1 = require("./utils/calendarDays");
const common_1 = require("./utils/common");
const react_1 = require("react");
const useDeepCompareEffect_1 = require("./utils/useDeepCompareEffect");
const AgendaView_1 = __importDefault(require("./components/agendaView/AgendaView"));
const CalendarDesktopNavigation_1 = __importDefault(require("./components/CalendarDesktopNavigation/CalendarDesktopNavigation"));
const CalendarHeader_1 = __importDefault(require("./components/calendarHeader/CalendarHeader"));
const CalendarTableLayoutLayer_1 = __importDefault(require("./layers/CalendarTableLayoutLayer"));
const DaysViewTable_1 = __importDefault(require("./components/daysViewTable/DaysViewTable"));
const MonthView_1 = __importDefault(require("./components/monthView/MonthView"));
const WeekNumbersCol_1 = __importDefault(require("./components/weekNumbersCol/WeekNumbersCol"));
const Calendar = (props) => {
    const [store, dispatch] = (0, react_1.useContext)(store_1.Context);
    const setContext = (type, payload) => {
        dispatch({ type, payload });
    };
    const { selectedDate, calendarDays, selectedView, callbacks, config, width } = store;
    const [prevView, setPrevView] = (0, react_1.useState)('');
    const [viewChanged, setViewChanged] = (0, react_1.useState)(null);
    (0, react_1.useEffect)(() => {
        const initialDate = props.initialDate
            ? luxon_1.DateTime.fromISO(props.initialDate)
            : luxon_1.DateTime.now();
        setContext('selectedDate', initialDate);
        if (selectedView) {
            const calendarDaysInitial = (0, calendarDays_1.getCalendarDays)(selectedView, initialDate, config.weekDayStart);
            setContext('calendarDays', calendarDaysInitial);
        }
    }, []);
    (0, react_1.useEffect)(() => {
        const viewChangedValue = props.selectedView || viewChanged;
        // if (props.selectedView && props.selectedView === selectedView) {
        //   return;
        // }
        if (prevView === viewChangedValue) {
            return;
        }
        if (!viewChangedValue) {
            return;
        }
        if (callbacks.onSelectView) {
            callbacks.onSelectView(viewChangedValue);
        }
        setContext('calendarDays', calendarDays[0]);
        setContext('selectedView', viewChangedValue);
        // use either passed value or internal state
        const setSelectedDate = (date) => {
            setContext('selectedDate', date);
        };
        const calendarDaysNew = (0, calendarDays_1.getCalendarDays)(viewChangedValue, selectedDate && (0, common_1.isSameMonth)(selectedDate)
            ? selectedDate
            : selectedDate || props.initialDate || luxon_1.DateTime.now(), config.weekDayStart, setSelectedDate, true);
        setContext('calendarDays', calendarDaysNew);
        setContext('layoutUpdateSequence', store.layoutUpdateSequence + 1);
        setPrevView(viewChangedValue);
        setViewChanged(null);
    }, [viewChanged, props.selectedView]);
    (0, react_1.useEffect)(() => {
        const selectedViewValue = props.selectedView || selectedView;
        if (prevView === selectedViewValue) {
            return;
        }
        if (selectedViewValue && selectedViewValue !== prevView) {
            setContext('calendarDays', calendarDays[0]);
            setContext('selectedView', selectedViewValue);
            setPrevView(selectedViewValue);
            const setSelectedDate = (date) => setContext('selectedDate', date);
            const calendarDaysNew = (0, calendarDays_1.getCalendarDays)(selectedViewValue, selectedDate || props.initialDate || luxon_1.DateTime.now(), config.weekDayStart, setSelectedDate, true);
            setContext('calendarDays', calendarDaysNew);
        }
    }, [selectedView]);
    (0, useDeepCompareEffect_1.useDeepCompareLayoutEffect)(() => {
        setContext('events', props.events);
    }, [props.events]);
    (0, react_1.useLayoutEffect)(() => {
        if (callbacks.onPageChange &&
            calendarDays &&
            calendarDays[0] &&
            calendarDays.length > 0) {
            callbacks.onPageChange(Object.assign(Object.assign({}, (0, calendarDays_1.getRange)(calendarDays)), { direction: store.direction }));
        }
    }, [
        selectedView,
        calendarDays === null || calendarDays === void 0 ? void 0 : calendarDays[0],
        calendarDays === null || calendarDays === void 0 ? void 0 : calendarDays[(calendarDays === null || calendarDays === void 0 ? void 0 : calendarDays.length) - 1],
    ]);
    return selectedView && (calendarDays === null || calendarDays === void 0 ? void 0 : calendarDays.length) > 0 && selectedDate && width ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(CalendarDesktopNavigation_1.default, { setViewChanged: setViewChanged, kalendRef: props.kalendRef }), selectedView !== enums_1.CALENDAR_VIEW.AGENDA &&
                selectedView !== enums_1.CALENDAR_VIEW.MONTH ? ((0, jsx_runtime_1.jsx)(CalendarHeader_1.default, { setViewChanged: setViewChanged })) : null, selectedView === enums_1.CALENDAR_VIEW.MONTH ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(CalendarHeader_1.default, {}), (0, jsx_runtime_1.jsxs)("div", Object.assign({ style: {
                            display: 'flex',
                            flexDirection: 'row',
                            width: '100%',
                            height: '100%',
                        } }, { children: [store.showWeekNumbers ? (0, jsx_runtime_1.jsx)(WeekNumbersCol_1.default, {}) : null, (0, jsx_runtime_1.jsx)("div", Object.assign({ className: 'Kalend__Calendar__table' }, { children: (0, jsx_runtime_1.jsx)("div", Object.assign({ className: (0, common_1.parseCssDark)('Kalend__Calendar__table-surface', store.isDark) }, { children: (0, jsx_runtime_1.jsx)(CalendarTableLayoutLayer_1.default, { children: (0, jsx_runtime_1.jsx)(MonthView_1.default, { events: props.events ? props.events : [], eventLayouts: props.eventLayouts, setViewChanged: setViewChanged }) }) })) }))] }))] })) : ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: 'Kalend__Calendar__table' }, { children: (0, jsx_runtime_1.jsx)("div", Object.assign({ className: (0, common_1.parseCssDark)('Kalend__Calendar__table-surface', store.isDark) }, { children: (0, jsx_runtime_1.jsxs)(CalendarTableLayoutLayer_1.default, { children: [selectedView === enums_1.CALENDAR_VIEW.DAY ||
                                selectedView === enums_1.CALENDAR_VIEW.THREE_DAYS ||
                                selectedView === enums_1.CALENDAR_VIEW.WEEK ? ((0, jsx_runtime_1.jsx)(DaysViewTable_1.default, { events: props.events ? props.events : [], eventLayouts: props.eventLayouts })) : null, selectedView === enums_1.CALENDAR_VIEW.AGENDA ? ((0, jsx_runtime_1.jsx)(AgendaView_1.default, { events: props.events ? props.events : [], eventLayouts: props.eventLayouts })) : null] }) })) })))] })) : null;
};
exports.default = Calendar;
