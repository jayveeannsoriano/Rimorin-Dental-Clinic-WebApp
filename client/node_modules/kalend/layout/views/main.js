"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../index");
const agendaView_1 = require("./agendaView");
const daysView_1 = require("./daysView/daysView");
const monthViewHelper_1 = require("../utils/monthViewHelper");
const monthView_1 = require("./monthView");
const Helper_1 = require("../utils/Helper");
const validator_1 = require("../utils/validator");
const getMonthViewResult = (data, calendarDays) => {
    const { events, width, config, height } = data;
    const monthPositions = (0, monthView_1.getMonthViewLayout)(events, width, calendarDays, config, (0, monthViewHelper_1.getMaxEventsVisible)(height));
    return Object.assign(Object.assign({ selectedView: index_1.CALENDAR_VIEW.MONTH }, monthPositions), { calendarDays, overflowingEvents: monthPositions.overflowingEvents });
};
const getDaysViewResult = (data, calendarDays) => {
    const { events, width, config, isMobile, selectedView } = data;
    const result = (0, daysView_1.getDaysViewLayout)(events, calendarDays, config, width, selectedView, isMobile);
    return {
        selectedView,
        headerPositions: result.headerPositions.positions,
        headerOffsetTop: result.headerPositions.headerOffsetTop,
        calendarDays,
        normalPositions: result.normalPositions,
    };
};
const getAgendaViewResult = (data) => {
    const { events, config } = data;
    const agendaEvents = (0, agendaView_1.getAgendaView)(events, config);
    return {
        events: agendaEvents,
        selectedView: index_1.CALENDAR_VIEW.AGENDA,
    };
};
const getViewLayout = (data, calendarDays) => {
    const { selectedView } = data;
    switch (selectedView) {
        case index_1.CALENDAR_VIEW.MONTH:
            return getMonthViewResult(data, calendarDays);
        case index_1.CALENDAR_VIEW.DAY || index_1.CALENDAR_VIEW.WEEK || index_1.CALENDAR_VIEW.THREE_DAYS:
            return getDaysViewResult(data, calendarDays);
        case index_1.CALENDAR_VIEW.AGENDA:
            return getAgendaViewResult(data);
        default:
            return getDaysViewResult(data, calendarDays);
    }
};
exports.default = (data) => {
    return new Promise((resolve) => {
        if (data) {
            (0, validator_1.validateInput)(data);
            // parse to calendar days if dates are ISO string
            const calendarDays = (0, Helper_1.parseToCalendarDays)(data.calendarDays);
            // calculate layout for different views
            const result = getViewLayout(data, calendarDays);
            resolve(result);
        }
    });
};
