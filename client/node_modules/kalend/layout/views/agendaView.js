"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAgendaView = void 0;
const LuxonHelper_1 = require("../utils/LuxonHelper");
const Helper_1 = require("../utils/Helper");
const KalendHelper_1 = require("../utils/KalendHelper");
const monthView_1 = require("./monthView");
const processAgendaEvents = (events, config) => {
    let preparedEvents = {};
    events.forEach((event) => {
        const { dateTimeStart, dateTimeEnd } = (0, KalendHelper_1.getEventDateTime)(event, config);
        // check if is multi-day
        const isSameDay = LuxonHelper_1.LuxonHelper.isSameDay(dateTimeStart, dateTimeEnd);
        // origin date to determine when event starts in each row
        let originDate = (0, Helper_1.formatToDateKey)(dateTimeStart);
        // handle multi-day
        if (!isSameDay) {
            const diffInDays = LuxonHelper_1.LuxonHelper.differenceInDays(dateTimeStart, dateTimeEnd);
            // need to store each occurrence
            let daySpawns = [];
            // flag if events continue in next row
            // split daySpawns and adjust originDate
            for (let i = 0; i <= diffInDays; i++) {
                const refDate = dateTimeStart.plus({ days: i });
                const dateKey = (0, Helper_1.formatToDateKey)(refDate, config.timezone);
                // store each day in multi-day event range
                daySpawns.push(dateKey);
                const eventClone = Object.assign(Object.assign({}, event), { startAt: refDate.toString(), summary: `${event.summary} ${i + 1}/${diffInDays + 1}`, originDate, daysAfter: diffInDays - i });
                eventClone.daySpawns = daySpawns;
                if (!preparedEvents[originDate]) {
                    preparedEvents[originDate] = [eventClone];
                }
                else {
                    preparedEvents[originDate] = [
                        ...preparedEvents[originDate],
                        ...[eventClone],
                    ];
                }
                daySpawns = [];
                originDate = (0, Helper_1.formatToDateKey)(refDate.plus({ days: 1 }));
            }
        }
        else {
            // single day event
            preparedEvents = (0, monthView_1.parseSingleDay)(event, config, preparedEvents, originDate);
        }
    });
    return preparedEvents;
};
const getAgendaView = (events, config) => {
    return processAgendaEvents(events, config);
};
exports.getAgendaView = getAgendaView;
