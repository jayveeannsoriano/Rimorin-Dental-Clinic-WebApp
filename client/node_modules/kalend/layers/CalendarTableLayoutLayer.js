"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const store_1 = require("../context/store");
const calendarDays_1 = require("../utils/calendarDays");
const react_1 = require("react");
const useDeepCompareEffect_1 = require("../utils/useDeepCompareEffect");
const CalendarTableLayoutLayer = (props) => {
    const [store] = (0, react_1.useContext)(store_1.Context);
    const { calendarDays, selectedView, callbacks, config, width, direction } = store;
    const [isMounted, setIsMounted] = (0, react_1.useState)(false);
    (0, react_1.useEffect)(() => {
        const rootEl = document.querySelector('.Kalend__Calendar__table');
        if (rootEl) {
            setIsMounted(true);
        }
    }, [document.querySelector('.Kalend__Calendar__table')]);
    // Expose basic state to outside
    (0, useDeepCompareEffect_1.useDeepCompareLayoutEffect)(() => {
        if (callbacks.onStateChange && isMounted) {
            const data = {
                selectedView,
                calendarDays,
                range: Object.assign(Object.assign({}, (0, calendarDays_1.getRange)(calendarDays)), { direction }),
                width,
                config,
                isMobile: store.isMobile,
                height: store.height,
                selectedDate: store.selectedDate.toUTC().toString(),
            };
            callbacks.onStateChange(data);
        }
    }, [
        selectedView,
        calendarDays,
        width,
        config,
        store.isMobile,
        isMounted,
        direction,
    ]);
    (0, react_1.useEffect)(() => {
        if (callbacks.onStateChange && isMounted) {
            const data = {
                selectedView,
                calendarDays,
                range: Object.assign(Object.assign({}, (0, calendarDays_1.getRange)(calendarDays)), { direction }),
                width,
                config,
                isMobile: store.isMobile,
                height: store.height,
                selectedDate: store.selectedDate.toUTC().toString(),
            };
            callbacks.onStateChange(data);
        }
    }, []);
    return isMounted ? props.children : null;
};
exports.default = CalendarTableLayoutLayer;
