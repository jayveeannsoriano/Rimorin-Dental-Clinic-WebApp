"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const store_1 = require("../context/store");
const react_1 = require("react");
const de_json_1 = __importDefault(require("../locales/de.json"));
const en_json_1 = __importDefault(require("../locales/en.json"));
const es_json_1 = __importDefault(require("../locales/es.json"));
const fr_json_1 = __importDefault(require("../locales/fr.json"));
const ptBR_json_1 = __importDefault(require("../locales/ptBR.json"));
const ru_json_1 = __importDefault(require("../locales/ru.json"));
const zh_json_1 = __importDefault(require("../locales/zh.json"));
const getKnownLanguage = (language) => {
    switch (language) {
        case 'en':
            return en_json_1.default;
        case 'de':
            return de_json_1.default;
        case 'es':
            return es_json_1.default;
        case 'fr':
            return fr_json_1.default;
        case 'ptBR':
            return ptBR_json_1.default;
        case 'ru':
            return ru_json_1.default;
        case 'zh':
            return zh_json_1.default;
        default:
            return 'en';
    }
};
const LanguageLayer = (props) => {
    const { language, customLanguage } = props;
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const [store, dispatch] = (0, react_1.useContext)(store_1.Context);
    const setContext = (type, payload) => {
        dispatch({ type, payload });
    };
    const { translations } = store;
    (0, react_1.useEffect)(() => {
        if (customLanguage) {
            setContext('translations', customLanguage);
        }
        else if (language) {
            setContext('translations', getKnownLanguage(language));
        }
    }, []);
    (0, react_1.useEffect)(() => {
        if (customLanguage) {
            setContext('translations', customLanguage);
        }
        else if (language) {
            setContext('translations', getKnownLanguage(language));
        }
    }, [customLanguage, language]);
    return translations ? props.children : null;
};
exports.default = LanguageLayer;
