"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const store_1 = require("../context/store");
const common_1 = require("../utils/common");
const react_1 = require("react");
const DimensionsLayoutLayer = (props) => {
    const [store, dispatch] = (0, react_1.useContext)(store_1.Context);
    const setContext = (type, payload) => {
        dispatch({ type, payload });
    };
    const { selectedView, headerEventRowsCount, showWeekNumbers } = store;
    (0, react_1.useEffect)(() => {
        const el = document === null || document === void 0 ? void 0 : document.querySelector('.Kalend__Calendar__root');
        if (!el) {
            return;
        }
        const resizeObserver = new ResizeObserver((entries) => {
            const entryRect = entries[0].contentRect;
            const width = entryRect.width;
            if (width < 750) {
                setContext('isMobile', true);
            }
            else {
                setContext('isMobile', false);
            }
            setContext('rawWidth', entryRect.width);
            setContext('width', entryRect.width - (0, common_1.getTableOffset)(selectedView, showWeekNumbers));
        });
        resizeObserver.observe(el);
    }, [document === null || document === void 0 ? void 0 : document.querySelector('.Kalend__Calendar__root'), selectedView]);
    (0, react_1.useEffect)(() => {
        const el = document === null || document === void 0 ? void 0 : document.querySelector('.Kalend__Calendar__root');
        if (!el) {
            return;
        }
        const resizeObserver = new ResizeObserver((entries) => {
            const entryRect = entries[0].contentRect;
            const width = entryRect.width;
            if (width < 750) {
                setContext('isMobile', true);
            }
            else {
                setContext('isMobile', false);
            }
            setContext('rawWidth', entryRect.width);
            setContext('width', entryRect.width - (0, common_1.getTableOffset)(selectedView, showWeekNumbers));
        });
        resizeObserver.observe(el);
    }, []);
    (0, react_1.useEffect)(() => {
        const el = document === null || document === void 0 ? void 0 : document.querySelector('.Kalend__Calendar__table');
        if (!el) {
            return;
        }
        const resizeObserver = new ResizeObserver((entries) => {
            const entryRect = entries[0].contentRect;
            setContext('height', entryRect.height);
        });
        resizeObserver.observe(el);
    }, [
        document === null || document === void 0 ? void 0 : document.querySelector('.Kalend__Calendar__table'),
        selectedView,
        headerEventRowsCount,
    ]);
    (0, react_1.useEffect)(() => {
        const el = document === null || document === void 0 ? void 0 : document.querySelector('.Kalend__Calendar__table');
        if (!el) {
            return;
        }
        const resizeObserver = new ResizeObserver((entries) => {
            const entryRect = entries[0].contentRect;
            setContext('height', entryRect.height);
        });
        resizeObserver.observe(el);
    }, []);
    return props.children;
};
exports.default = DimensionsLayoutLayer;
