"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCallbacks = exports.createConfig = void 0;
const enums_1 = require("../common/enums");
const store_1 = require("../context/store");
const constants_1 = require("../common/constants");
const luxon_1 = require("luxon");
const eventLayout_1 = require("../utils/eventLayout");
const react_1 = require("react");
const useDeepCompareEffect_1 = require("../utils/useDeepCompareEffect");
// eslint-disable-next-line @typescript-eslint/no-empty-function
const emptyFunction = () => { };
const parseTimeFormat = (timeFormatValue) => {
    if (timeFormatValue) {
        if (timeFormatValue.toLowerCase() ===
            enums_1.TIME_FORMAT.H_24.toString().toLowerCase()) {
            return enums_1.TIME_FORMAT.H_24;
        }
        else if (timeFormatValue.toLowerCase() ===
            enums_1.TIME_FORMAT.H_12.toString().toLowerCase()) {
            return enums_1.TIME_FORMAT.H_12;
        }
    }
};
const parseWeekDayStart = (weekDayStartValue) => {
    if (weekDayStartValue) {
        if (weekDayStartValue.toLowerCase() === enums_1.WEEKDAY_START.MONDAY.toLowerCase()) {
            return enums_1.WEEKDAY_START.MONDAY;
        }
        else if (weekDayStartValue.toLowerCase() === enums_1.WEEKDAY_START.SUNDAY.toLowerCase()) {
            return enums_1.WEEKDAY_START.SUNDAY;
        }
    }
};
const parseHourHeight = (hourHeightOrigin) => {
    const remainder = hourHeightOrigin % 4;
    if (remainder === 0) {
        return hourHeightOrigin;
    }
    const result = hourHeightOrigin - remainder;
    return result >= 10 ? result : constants_1.DEFAULT_HOUR_HEIGHT;
};
const createConfig = (props) => {
    return {
        hourHeight: props.hourHeight
            ? parseHourHeight(props.hourHeight)
            : constants_1.DEFAULT_HOUR_HEIGHT,
        timeFormat: parseTimeFormat(props.timeFormat) || enums_1.TIME_FORMAT.H_24,
        timezone: props.timezone || Intl.DateTimeFormat().resolvedOptions().timeZone,
        weekDayStart: parseWeekDayStart(props.weekDayStart) || enums_1.WEEKDAY_START.MONDAY,
        isDark: props.isDark || false,
        disableMobileDropdown: props.disableMobileDropdown || false,
        disabledViews: props.disabledViews,
        calendarIDsHidden: props.calendarIDsHidden || null,
        hasExternalLayout: props.eventLayouts !== undefined,
        focusHour: props.focusHour || null,
        showTimeLine: props.showTimeLine || false,
        autoScroll: props.autoScroll || false,
        disabledDragging: props.disabledDragging || false,
        newEventText: props.newEventText || null,
    };
};
exports.createConfig = createConfig;
const createCallbacks = (props) => {
    return {
        onEventDragFinish: props.onEventDragFinish || undefined,
        onPageChange: props.onPageChange || undefined,
        onSelectView: props.onSelectView || undefined,
        onEventClick: props.onEventClick || emptyFunction,
        onNewEventClick: props.onNewEventClick || emptyFunction,
        showMoreMonth: props.showMoreMonth || emptyFunction,
        onStateChange: props.onStateChange || undefined,
    };
};
exports.createCallbacks = createCallbacks;
const ConfigLayer = (props) => {
    var _a;
    const [isReady, setIsReady] = (0, react_1.useState)(false);
    const [store, dispatch] = (0, react_1.useContext)(store_1.Context);
    const setContext = (type, payload) => {
        dispatch({ type, payload });
    };
    const initFromProps = () => {
        const config = (0, exports.createConfig)(props);
        const callbacks = (0, exports.createCallbacks)(props);
        setContext('config', config);
        if (props.colors) {
            setContext('colors', props.colors);
        }
        setContext('callbacks', callbacks);
        setContext('isDark', props.isDark || false);
        setContext('selectedView', props.selectedView || props.initialView || enums_1.CALENDAR_VIEW.WEEK);
        setContext('selectedDate', props.initialDate ? luxon_1.DateTime.fromISO(props.initialDate) : luxon_1.DateTime.now());
        setContext('isNewEventOpen', true);
        if (props.style) {
            setContext('style', props.style);
        }
        setContext('showWeekNumbers', props.showWeekNumbers || false);
        if (props.draggingDisabledConditions) {
            setContext('draggingDisabledConditions', props.draggingDisabledConditions);
        }
        setIsReady(true);
    };
    (0, react_1.useEffect)(() => {
        initFromProps();
        setIsReady(true);
    }, []);
    (0, react_1.useEffect)(() => {
        setContext('isNewEventOpen', props.isNewEventOpen);
    }, [props.isNewEventOpen]);
    (0, react_1.useEffect)(() => {
        initFromProps();
        setContext('layoutUpdateSequence', store.layoutUpdateSequence + 1);
    }, [
        props.timeFormat,
        props.timezone,
        props.showWeekNumbers,
        // props.disabledViews, // keeps re-rendering without any change
        props.isDark,
        props.disableMobileDropdown,
        props.newEventText,
    ]);
    (0, react_1.useEffect)(() => {
        const newConfig = Object.assign({}, store.config);
        if (props.hourHeight) {
            newConfig.hourHeight = parseHourHeight(props.hourHeight);
        }
        setContext('config', newConfig);
    }, [props.hourHeight]);
    (0, useDeepCompareEffect_1.useDeepCompareEffect)(() => {
        const eventsFiltered = (0, eventLayout_1.filterEventsByCalendarIDs)(props.events, props.calendarIDsHidden);
        setContext('events', eventsFiltered);
    }, [props.calendarIDsHidden, (_a = props.calendarIDsHidden) === null || _a === void 0 ? void 0 : _a.length]);
    return isReady ? props.children : null;
};
exports.default = ConfigLayer;
