"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const store_1 = require("../../../context/store");
const enums_1 = require("../../../common/enums");
const constants_1 = require("../../../common/constants");
const MonthOneDayUtils_1 = require("./MonthOneDayUtils");
const common_1 = require("../../../utils/common");
const ButtonBase_1 = __importDefault(require("../../buttonBase/ButtonBase"));
const EventButton_1 = __importDefault(require("../../eventButton/EventButton"));
const luxonHelper_1 = __importDefault(require("../../../utils/luxonHelper"));
const MonthOneDay = (props) => {
    const { index, data, day } = props;
    const [store] = (0, react_1.useContext)(store_1.Context);
    const { isDark, selectedDate, callbacks, height } = store;
    const { showMoreMonth } = callbacks;
    const renderEvents = (dataset) => {
        const tableHeight = height / 6 - constants_1.MONTH_DAY_HEADER_HEIGHT; // height of one day
        const maxEvents = Number((tableHeight / constants_1.MONTH_EVENT_HEIGHT).toFixed(0)) - 1;
        const eventsCount = [];
        const handleShowMore = () => {
            if (showMoreMonth) {
                showMoreMonth(dataset);
            }
        };
        if (dataset) {
            return dataset.map((event, index) => {
                eventsCount.push('one');
                if (eventsCount.length < maxEvents) {
                    return ((0, jsx_runtime_1.jsx)(EventButton_1.default, { item: { event }, type: enums_1.EVENT_TYPE.MONTH, day: day }, `${event.id}${event.internalID ? event.internalID : ''}`));
                }
                else if (eventsCount.length > maxEvents &&
                    index + 1 === dataset.length) {
                    return ((0, jsx_runtime_1.jsx)(ButtonBase_1.default, Object.assign({ isDark: isDark, className: 'Kalend__Monthview_Event', style: {
                            width: '100%',
                            display: 'flex',
                            justifyContent: 'center',
                            alignItems: 'center',
                            position: 'absolute',
                            top: maxEvents * constants_1.MONTH_EVENT_HEIGHT - constants_1.MONTH_EVENT_HEIGHT / 2 - 2,
                            height: constants_1.MONTH_EVENT_HEIGHT,
                        }, onClick: handleShowMore }, { children: (0, jsx_runtime_1.jsxs)("p", Object.assign({ className: 'Kalend__text', style: { fontSize: 11 } }, { children: [eventsCount.length + 1 - maxEvents, " more"] })) }), day.toString()));
                }
            });
        }
    };
    const renderDate = (date) => {
        const { day } = date;
        if (luxonHelper_1.default.isToday(date)) {
            return ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: (0, common_1.parseCssDark)('Kalend__MonthOneDay__date-container Kalend__MonthOneDay__circle-color', isDark) }, { children: (0, jsx_runtime_1.jsx)("p", Object.assign({ className: (0, common_1.parseCssDark)('Kalend__text Kalend__MonthOneDay__date-today', isDark) }, { children: day })) })));
        }
        else if (date.hasSame(selectedDate, 'month')) {
            return ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: 'Kalend__MonthOneDay__date-container' }, { children: (0, jsx_runtime_1.jsxs)("p", Object.assign({ className: (0, common_1.parseCssDark)('Kalend__text Kalend__MonthOneDay__date', isDark) }, { children: [' ', day] })) })));
        }
        else {
            return ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: 'Kalend__MonthOneDay__date-container' }, { children: (0, jsx_runtime_1.jsx)("p", Object.assign({ className: (0, common_1.parseCssDark)('Kalend__text Kalend__MonthOneDay__date-past', isDark) }, { children: day })) })));
        }
    };
    const dataForDay = data;
    const events = dataForDay ? renderEvents(dataForDay) : null;
    const borderClassName = (0, MonthOneDayUtils_1.getBorderClassName)(index);
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: borderClassName, id: `Kalend__day__${day.toString()}` }, { children: [(0, jsx_runtime_1.jsx)("div", Object.assign({ className: 'Kalend__MonthOneDay__header-container' }, { children: renderDate(day) })), (0, jsx_runtime_1.jsx)("div", Object.assign({ className: 'Kalend__MonthOneDay__events-container' }, { children: events }))] })));
};
exports.default = MonthOneDay;
