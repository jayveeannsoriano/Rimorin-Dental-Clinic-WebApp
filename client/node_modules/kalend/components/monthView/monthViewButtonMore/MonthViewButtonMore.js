"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const store_1 = require("../../../context/store");
const enums_1 = require("../../../common/enums");
const common_1 = require("../../../utils/common");
const react_1 = require("react");
const Dropdown_1 = __importDefault(require("../../dropdown/Dropdown"));
const EventButton_1 = __importDefault(require("../../eventButton/EventButton"));
const MonthViewButtonMore = (props) => {
    const [store, dispatch] = (0, react_1.useContext)(store_1.Context);
    const setContext = (type, payload) => {
        dispatch({ type, payload });
    };
    const { width, monthOverflowEvents } = store;
    const { calendarDays } = props;
    const colWidth = width / 7;
    const handleClick = (day, events) => {
        setContext('showMoreEvents', { day, events });
    };
    const renderShowMoreButtons = () => {
        if (!monthOverflowEvents || !calendarDays || calendarDays.length === 0) {
            return [];
        }
        return calendarDays.map((calendarDay) => {
            const dateKey = (0, common_1.formatDateTimeToString)(calendarDay);
            const events = monthOverflowEvents[dateKey];
            if (events) {
                return ((0, jsx_runtime_1.jsx)(Dropdown_1.default, Object.assign({ onClick: () => handleClick(calendarDay, events), width: colWidth, day: calendarDay }, { children: (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("h6", Object.assign({ className: (0, common_1.parseCssDark)('Kalend__MonthView_more_title', store.isDark) }, { children: calendarDay.toFormat('dd. MMM') })), events === null || events === void 0 ? void 0 : events.map((event) => {
                                return ((0, jsx_runtime_1.jsx)(EventButton_1.default, { item: { event }, type: enums_1.EVENT_TYPE.SHOW_MORE_MONTH }, `${event.id}${event.internalID ? event.internalID : ''}`));
                            })] }) }), calendarDay.toString()));
            }
            else {
                return ((0, jsx_runtime_1.jsx)("div", { style: { width: colWidth, visibility: 'hidden' } }, calendarDay.toString()));
            }
        });
    };
    const showMoreButtons = renderShowMoreButtons();
    return ((0, jsx_runtime_1.jsx)("div", Object.assign({ style: {
            width: '100%',
            display: 'flex',
            flexDirection: 'row',
            position: 'absolute',
            bottom: 1,
            left: 0,
        } }, { children: showMoreButtons })));
};
exports.default = MonthViewButtonMore;
