"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const store_1 = require("../../context/store");
const enums_1 = require("../../common/enums");
const MonthWeekRow_utils_1 = require("./monthWeekRow/MonthWeekRow.utils");
const common_1 = require("../../utils/common");
const react_1 = require("react");
const useDeepCompareEffect_1 = require("../../utils/useDeepCompareEffect");
const DaysViewVerticalLines_1 = __importDefault(require("../daysViewTable/daysViewVerticalLines/DaysViewVerticalLines"));
const layout_1 = __importDefault(require("../../layout"));
const MonthWeekRow_1 = __importDefault(require("./monthWeekRow/MonthWeekRow"));
const renderOneRow = (days, eventRows, sequence, setViewChanged) => {
    const rows = (0, MonthWeekRow_utils_1.getMonthRows)(days);
    return rows.map((row, index) => {
        return ((0, jsx_runtime_1.jsx)(MonthWeekRow_1.default, { days: row, index: index, itemRows: eventRows ? eventRows[index] : [], sequence: sequence, setViewChanged: setViewChanged }, row[0].toString() + sequence));
    });
};
const MonthView = (props) => {
    const [wasInit, setWasInit] = (0, react_1.useState)(false);
    const [calendarContent, setCalendarContent] = (0, react_1.useState)(null);
    const { events } = props;
    const [store, dispatch] = (0, react_1.useContext)(store_1.Context);
    const setContext = (type, payload) => {
        dispatch({ type, payload });
    };
    const { rawWidth, width, calendarDays, height, showWeekNumbers } = store;
    const style = {
        width: showWeekNumbers ? width : rawWidth,
        height: '100%',
    };
    const hasExternalLayout = props.eventLayouts !== undefined;
    (0, react_1.useEffect)(() => {
        if (height !== 0) {
            if (!hasExternalLayout) {
                (0, layout_1.default)({
                    events,
                    width: showWeekNumbers ? width : rawWidth,
                    height,
                    calendarDays,
                    config: store.config,
                    selectedView: enums_1.CALENDAR_VIEW.MONTH,
                }).then((res) => {
                    setWasInit(true);
                    setContext('monthLayout', res.positions);
                    setContext('monthOverflowEvents', res.overflowingEvents);
                    setContext('layoutUpdateSequence', store.layoutUpdateSequence + 1);
                    const content = renderOneRow(calendarDays, res.positions, store.layoutUpdateSequence, props.setViewChanged);
                    setCalendarContent(content);
                });
            }
        }
    }, [height, rawWidth, store.config.timezone]);
    (0, useDeepCompareEffect_1.useDeepCompareEffect)(() => {
        if (wasInit && height !== 0) {
            if (!hasExternalLayout) {
                (0, layout_1.default)({
                    events,
                    width: showWeekNumbers ? width : rawWidth,
                    height,
                    calendarDays,
                    config: store.config,
                    selectedView: enums_1.CALENDAR_VIEW.MONTH,
                }).then((res) => {
                    setContext('monthLayout', res.positions);
                    setContext('monthOverflowEvents', res.overflowingEvents);
                    setContext('layoutUpdateSequence', store.layoutUpdateSequence + 1);
                    const content = renderOneRow(calendarDays, res.positions, store.layoutUpdateSequence, props.setViewChanged);
                    setCalendarContent(content);
                });
            }
        }
    }, [calendarDays[0], events]);
    (0, useDeepCompareEffect_1.useDeepCompareEffect)(() => {
        if (hasExternalLayout &&
            (0, common_1.getSelectedViewType)(props.eventLayouts.selectedView) ===
                enums_1.CALENDAR_VIEW.MONTH) {
            setContext('monthLayout', props.eventLayouts.positions);
            setContext('monthOverflowEvents', props.eventLayouts.overflowingEvents);
            setContext('layoutUpdateSequence', store.layoutUpdateSequence + 1);
            const content = renderOneRow(calendarDays, props.eventLayouts.positions, store.layoutUpdateSequence, props.setViewChanged);
            setCalendarContent(content);
        }
    }, [props.eventLayouts]);
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: 'Kalend__MonthView__container', style: style }, { children: [(0, jsx_runtime_1.jsx)(DaysViewVerticalLines_1.default, {}), calendarContent] })));
};
exports.default = MonthView;
