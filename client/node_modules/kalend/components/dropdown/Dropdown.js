"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const store_1 = require("../../context/store");
const common_1 = require("../../utils/common");
const react_1 = require("react");
const ButtonBase_1 = __importDefault(require("../buttonBase/ButtonBase"));
const Dropdown = (props) => {
    const [store] = (0, react_1.useContext)(store_1.Context);
    const { translations, height } = store;
    const [isVisible, setVisible] = (0, react_1.useState)(false);
    const [layout, setLayout] = (0, react_1.useState)({ x: null, y: null });
    const handleClick = (e) => {
        const { x, y } = e.nativeEvent;
        setLayout({ x, y });
        setVisible(true);
    };
    const getStyle = () => {
        if (layout.x) {
            return {
                left: layout.x,
                top: layout.y,
                maxWidth: 300,
                maxHeight: height - 24,
                minWidth: 120,
                height: 'auto',
                overflowX: 'hidden',
                overflowY: 'auto',
            };
        }
    };
    // Correct layout
    (0, react_1.useLayoutEffect)(() => {
        if (isVisible) {
            const element = document.getElementById('Kalend__Dropdown__container');
            if (element) {
                let newX = layout.x;
                let newY = layout.y;
                if (element.offsetHeight + layout.y > window.innerHeight) {
                    newY = layout.y - element.offsetHeight;
                }
                if (element.offsetWidth + layout.x > window.innerWidth) {
                    newX = layout.x - element.offsetWidth;
                }
                setLayout({
                    x: newX,
                    y: newY,
                });
            }
        }
    }, [
        isVisible,
        document.getElementsByClassName('Kalend__Dropdown__container'),
    ]);
    const style = getStyle();
    return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(ButtonBase_1.default, Object.assign({ className: (0, common_1.parseCssDark)('Kalend__Monthview_Event', store.isDark), style: {
                    width: props.width,
                    display: 'flex',
                    justifyContent: 'center',
                    alignItems: 'center',
                    height: 20,
                }, onClick: handleClick, isDark: store.isDark }, { children: (0, jsx_runtime_1.jsx)("p", Object.assign({ className: (0, common_1.parseCssDark)('Kalend__text', !store.isDark), style: { fontSize: 11 } }, { children: translations['buttons']['showMore'] })) })), isVisible ? ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: 'Kalend__Dropdown__backdrop', onClick: () => setVisible(false) }, { children: (0, jsx_runtime_1.jsx)("div", Object.assign({ className: (0, common_1.parseCssDark)('Kalend__Dropdown__container', store.isDark), id: "Kalend__Dropdown__container", style: style }, { children: props.children })) }))) : null] }));
};
exports.default = Dropdown;
