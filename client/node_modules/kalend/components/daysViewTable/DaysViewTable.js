"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const constants_1 = require("../../common/constants");
const enums_1 = require("../../common/enums");
const store_1 = require("../../context/store");
const luxon_1 = require("luxon");
const common_1 = require("../../utils/common");
const react_1 = require("react");
const useDeepCompareEffect_1 = require("../../utils/useDeepCompareEffect");
const CalendarBodyHours_1 = __importDefault(require("./daysViewOneDay/calendarBodyHours/CalendarBodyHours"));
const DaysViewOneDay_1 = __importDefault(require("./daysViewOneDay/DaysViewOneDay"));
const DaysViewVerticalLines_1 = __importDefault(require("./daysViewVerticalLines/DaysViewVerticalLines"));
const layout_1 = __importDefault(require("../../layout"));
const renderOneDay = (calendarDays, events, sequence) => {
    return calendarDays.map((calendarDay, index) => {
        const formattedDayString = (0, common_1.formatDateTimeToString)(calendarDay);
        return ((0, jsx_runtime_1.jsx)(DaysViewOneDay_1.default, { day: calendarDay, index: index, data: events ? events[formattedDayString] : [] }, formattedDayString + sequence));
    });
};
const DaysViewTable = (props) => {
    const { events } = props;
    const [wasInit, setWasInit] = (0, react_1.useState)(false);
    const [calendarContent, setCalendarContent] = (0, react_1.useState)(null);
    const [store, dispatch] = (0, react_1.useContext)(store_1.Context);
    const setContext = (type, payload) => {
        dispatch({ type, payload });
    };
    const { isMobile, calendarDays, width, selectedView, height, config } = store;
    const style = {
        paddingLeft: constants_1.CALENDAR_OFFSET_LEFT,
        // width: '100%',
        height: '100%',
    };
    const adjustScrollPosition = () => {
        const currentElement = document.getElementById(`Kalend__timetable`);
        const shift = config.focusHour ? config.focusHour : luxon_1.DateTime.now().hour;
        currentElement.scrollTop = shift * config.hourHeight - config.hourHeight;
    };
    (0, react_1.useEffect)(() => {
        if (!store.config.autoScroll) {
            return;
        }
        adjustScrollPosition();
    }, []);
    const hasExternalLayout = props.eventLayouts !== undefined;
    // recalculate event positions on calendarDays change
    (0, react_1.useLayoutEffect)(() => {
        if (wasInit) {
            if (!hasExternalLayout) {
                (0, layout_1.default)({
                    events,
                    width,
                    height,
                    calendarDays,
                    config: store.config,
                    isMobile,
                    selectedView,
                }).then((res) => {
                    setContext('headerLayout', res.headerPositions);
                    setContext('headerEventRowsCount', res.headerOffsetTop);
                    setContext('daysViewLayout', res.normalPositions);
                    setContext('layoutUpdateSequence', store.layoutUpdateSequence + 1);
                    const days = renderOneDay(store.calendarDays, res.normalPositions, store.layoutUpdateSequence + 1);
                    setCalendarContent(days);
                });
            }
        }
    }, [calendarDays[0], selectedView]);
    (0, react_1.useLayoutEffect)(() => {
        if (wasInit) {
            if (!hasExternalLayout) {
                (0, layout_1.default)({
                    events,
                    width,
                    height,
                    calendarDays,
                    config: store.config,
                    isMobile,
                    selectedView,
                }).then((res) => {
                    setContext('headerLayout', res.headerPositions);
                    setContext('headerEventRowsCount', res.headerOffsetTop);
                    setContext('daysViewLayout', res.normalPositions);
                    setContext('layoutUpdateSequence', store.layoutUpdateSequence + 1);
                    const days = renderOneDay(store.calendarDays, res.normalPositions, store.layoutUpdateSequence + 1);
                    setCalendarContent(days);
                });
            }
        }
    }, [width]);
    (0, useDeepCompareEffect_1.useDeepCompareLayoutEffect)(() => {
        if (!hasExternalLayout) {
            (0, layout_1.default)({
                events,
                width,
                height,
                calendarDays,
                config: store.config,
                isMobile,
                selectedView,
            }).then((res) => {
                setContext('headerLayout', res.headerPositions);
                setContext('headerEventRowsCount', res.headerOffsetTop);
                setContext('daysViewLayout', res.normalPositions);
                setContext('layoutUpdateSequence', store.layoutUpdateSequence + 1);
                const days = renderOneDay(store.calendarDays, res.normalPositions, store.layoutUpdateSequence + 1);
                setCalendarContent(days);
            });
        }
    }, [events]);
    (0, react_1.useLayoutEffect)(() => {
        if (!hasExternalLayout) {
            (0, layout_1.default)({
                events,
                width,
                height,
                calendarDays,
                config: store.config,
                isMobile,
                selectedView,
            }).then((res) => {
                setContext('headerLayout', res.headerPositions);
                setContext('headerEventRowsCount', res.headerOffsetTop);
                setContext('daysViewLayout', res.normalPositions);
                setContext('layoutUpdateSequence', store.layoutUpdateSequence + 1);
                const days = renderOneDay(store.calendarDays, res.normalPositions, store.layoutUpdateSequence + 1);
                setCalendarContent(days);
            });
        }
    }, [config.hourHeight, config.timezone]);
    (0, react_1.useLayoutEffect)(() => {
        if (!hasExternalLayout) {
            (0, layout_1.default)({
                events,
                width,
                height,
                calendarDays,
                config: store.config,
                isMobile,
                selectedView,
            }).then((res) => {
                setContext('headerLayout', res.headerPositions);
                setContext('headerEventRowsCount', res.headerOffsetTop);
                setContext('daysViewLayout', res.normalPositions);
                setContext('layoutUpdateSequence', store.layoutUpdateSequence + 1);
                const days = renderOneDay(store.calendarDays, res.normalPositions, store.layoutUpdateSequence + 1);
                setCalendarContent(days);
            });
        }
        setWasInit(true);
    }, []);
    (0, useDeepCompareEffect_1.useDeepCompareLayoutEffect)(() => {
        if (hasExternalLayout &&
            (0, common_1.getSelectedViewType)(props.eventLayouts.selectedView) ===
                enums_1.CALENDAR_VIEW.WEEK) {
            setContext('headerLayout', props.eventLayouts.headerPositions);
            setContext('headerEventRowsCount', props.eventLayouts.headerOffsetTop);
            setContext('daysViewLayout', props.eventLayouts.normalPositions);
            setContext('layoutUpdateSequence', store.layoutUpdateSequence + 1);
            const days = renderOneDay(store.calendarDays, props.eventLayouts.normalPositions, store.layoutUpdateSequence + 1);
            setCalendarContent(days);
        }
    }, [props.eventLayouts]);
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ style: style, className: 'Kalend__CalendarBody', id: `Kalend__timetable` }, { children: [(0, jsx_runtime_1.jsx)(CalendarBodyHours_1.default, {}), (0, jsx_runtime_1.jsx)(DaysViewVerticalLines_1.default, {}), calendarContent] })));
};
exports.default = DaysViewTable;
