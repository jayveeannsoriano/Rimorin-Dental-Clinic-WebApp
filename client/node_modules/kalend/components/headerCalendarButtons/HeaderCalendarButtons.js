"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSingleView = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const enums_1 = require("../../common/enums");
const store_1 = require("../../context/store");
const common_1 = require("../../utils/common");
const react_1 = require("react");
const ButtonBase_1 = __importDefault(require("../buttonBase/ButtonBase"));
const HeaderCalendarButton = (props) => {
    const { buttonData, setViewChanged, handleClose, isForcedMobile } = props;
    const [store] = (0, react_1.useContext)(store_1.Context);
    const { isDark, selectedView, isMobile } = store;
    const isSelected = buttonData.value === selectedView;
    const buttonClassName = `Kalend__header_calendar_button${isSelected ? '-selected' : ''}`;
    const textClassName = `Kalend__text Kalend__header_calendar_button-text${isSelected ? '-selected' : ''}`;
    const navigateFunction = () => {
        if (handleClose) {
            handleClose();
        }
        setViewChanged(buttonData.value);
    };
    return ((0, jsx_runtime_1.jsx)(ButtonBase_1.default, Object.assign({ className: (0, common_1.parseClassName)(buttonClassName, isMobile || isForcedMobile, isDark), isDark: isDark, onClick: navigateFunction }, { children: (0, jsx_runtime_1.jsx)("p", Object.assign({ className: (0, common_1.parseClassName)(textClassName, isMobile, isDark) }, { children: buttonData.label })) })));
};
const isSingleView = (disabledViews) => {
    if (!disabledViews ||
        (disabledViews &&
            (disabledViews === null || disabledViews === void 0 ? void 0 : disabledViews.length) + 1 !== Object.values(enums_1.CALENDAR_VIEW).length)) {
        return false;
    }
    return true;
};
exports.isSingleView = isSingleView;
/**
 * Buttons for switching calendar view in desktop layout
 * @constructor
 */
const HeaderCalendarButtons = (props) => {
    const { setViewChanged, handleClose, isForcedMobile } = props;
    const [store] = (0, react_1.useContext)(store_1.Context);
    const { isDark, isMobile, translations, config } = store;
    const { disabledViews } = config;
    return (0, exports.isSingleView)(disabledViews) ? null : ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: (0, common_1.parseClassName)('Kalend__header_calendar_buttons__container', !!(isMobile || isForcedMobile), isDark) }, { children: [!(disabledViews === null || disabledViews === void 0 ? void 0 : disabledViews.includes(enums_1.CALENDAR_VIEW.AGENDA)) ? ((0, jsx_runtime_1.jsx)(HeaderCalendarButton, { buttonData: {
                    label: translations['buttons']['agenda'],
                    value: enums_1.CALENDAR_VIEW.AGENDA,
                }, setViewChanged: setViewChanged, handleClose: handleClose, isForcedMobile: isForcedMobile })) : null, !(disabledViews === null || disabledViews === void 0 ? void 0 : disabledViews.includes(enums_1.CALENDAR_VIEW.DAY)) ? ((0, jsx_runtime_1.jsx)(HeaderCalendarButton, { buttonData: {
                    label: translations['buttons']['day'],
                    value: enums_1.CALENDAR_VIEW.DAY,
                }, setViewChanged: setViewChanged, handleClose: handleClose, isForcedMobile: isForcedMobile })) : null, !(disabledViews === null || disabledViews === void 0 ? void 0 : disabledViews.includes(enums_1.CALENDAR_VIEW.THREE_DAYS)) ? ((0, jsx_runtime_1.jsx)(HeaderCalendarButton, { buttonData: {
                    label: translations['buttons']['threeDays'],
                    value: enums_1.CALENDAR_VIEW.THREE_DAYS,
                }, setViewChanged: setViewChanged, handleClose: handleClose, isForcedMobile: isForcedMobile })) : null, !(disabledViews === null || disabledViews === void 0 ? void 0 : disabledViews.includes(enums_1.CALENDAR_VIEW.WEEK)) ? ((0, jsx_runtime_1.jsx)(HeaderCalendarButton, { buttonData: {
                    label: translations['buttons']['week'],
                    value: enums_1.CALENDAR_VIEW.WEEK,
                }, setViewChanged: setViewChanged, handleClose: handleClose, isForcedMobile: isForcedMobile })) : null, !(disabledViews === null || disabledViews === void 0 ? void 0 : disabledViews.includes(enums_1.CALENDAR_VIEW.MONTH)) ? ((0, jsx_runtime_1.jsx)(HeaderCalendarButton, { buttonData: {
                    label: translations['buttons']['month'],
                    value: enums_1.CALENDAR_VIEW.MONTH,
                }, setViewChanged: setViewChanged, handleClose: handleClose, isForcedMobile: isForcedMobile })) : null] })));
};
exports.default = HeaderCalendarButtons;
