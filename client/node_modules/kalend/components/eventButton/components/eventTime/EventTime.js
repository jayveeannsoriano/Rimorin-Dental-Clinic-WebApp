"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const store_1 = require("../../../../context/store");
const enums_1 = require("../../../../common/enums");
const common_1 = require("../../../../utils/common");
const dateTimeParser_1 = require("../../../../utils/dateTimeParser");
const TIME_FORMAT_PATTERN = 'HH:mm';
const TIME_H_12_FORMAT_PATTERN = 'hh:mm a';
const parseTimeFormat = (day, timeFormat) => {
    if (timeFormat === enums_1.TIME_FORMAT.H_24) {
        return day.toFormat(TIME_FORMAT_PATTERN);
    }
    else {
        return day.toFormat(TIME_H_12_FORMAT_PATTERN);
    }
};
const formatEventTimeV2 = (event, timeFormat, timezone, endAtState) => {
    const { startAt, endAt } = event;
    const startAtDateTime = (0, dateTimeParser_1.parseToDateTime)(startAt, timezone, timezone);
    const endAtDateTime = (0, dateTimeParser_1.parseToDateTime)(endAtState || endAt, timezone, timezone);
    return {
        start: parseTimeFormat(startAtDateTime, timeFormat),
        end: parseTimeFormat(endAtDateTime, timeFormat),
    };
};
const normalTime = (timeFormat, event, timezone, type, isDark, endAt, isDarkColor) => {
    var _a;
    const timeV2 = formatEventTimeV2(event, timeFormat, timezone, endAt);
    const style = {
        color: ((_a = event.style) === null || _a === void 0 ? void 0 : _a.color) ? event.style.color : 'inherit',
    };
    return timeFormat === enums_1.TIME_FORMAT.H_12 ? ((0, jsx_runtime_1.jsxs)("p", Object.assign({ className: `Kalend__text ${(0, common_1.parseCssDark)(`Kalend__Event__time__type-${type}`, isDark)} Kalend__Event__time ${isDarkColor ? 'Kalend__text-light' : 'Kalend__text-dark'}`, style: style }, { children: [timeV2.start, (0, jsx_runtime_1.jsx)("br", {}), timeV2.end] }))) : ((0, jsx_runtime_1.jsxs)("p", Object.assign({ className: `Kalend__text ${(0, common_1.parseCssDark)(`Kalend__Event__time__type-${type}`, isDark)} Kalend__Event__time ${isDarkColor ? 'Kalend__text-light' : 'Kalend__text-dark'}`, style: style }, { children: [timeV2.start, " - ", timeV2.end] })));
};
const EventTime = (props) => {
    var _a;
    const { isDark, event, type, endAt, isDarkColor } = props;
    const [store] = (0, react_1.useContext)(store_1.Context);
    const { config, isMobile } = store;
    const { timezone, timeFormat } = config;
    const style = {
        color: ((_a = event.style) === null || _a === void 0 ? void 0 : _a.color) ? event.style.color : 'inherit',
    };
    return type === enums_1.EVENT_TYPE.AGENDA && event.allDay ? ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("p", Object.assign({ className: `Kalend__text ${(0, common_1.parseCssDark)(`Kalend__Event__time__type-${type}`, isDark)} Kalend__Event__time ${isDarkColor ? 'Kalend__text-light' : 'Kalend__text-dark'}`, style: style }, { children: "All day" })), !isMobile ? ((0, jsx_runtime_1.jsx)("p", Object.assign({ style: {
                    color: 'transparent',
                    padding: 0,
                    margin: 0,
                    fontSize: '0.8em',
                } }, { children: "123 12" }))) : null] })) : (normalTime(timeFormat, event, timezone, type, isDark, endAt, isDarkColor));
};
exports.default = EventTime;
