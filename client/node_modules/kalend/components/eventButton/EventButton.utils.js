"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.disableTouchDragging = exports.initEventButtonPosition = exports.eventButtonInitialState = exports.createTempMonthEventsLayout = void 0;
const enums_1 = require("../../common/enums");
const constants_1 = require("../../common/constants");
const common_1 = require("../../utils/common");
const createTempMonthEventsLayout = () => {
    return {
        offsetLeft: 0,
        offsetTop: 0,
        width: '90%',
        height: constants_1.MONTH_EVENT_HEIGHT,
        zIndex: 1,
        border: 'none',
        meta: {
            showTime: false,
            isFullWidth: true,
            centerText: true,
        },
    };
};
exports.createTempMonthEventsLayout = createTempMonthEventsLayout;
exports.eventButtonInitialState = {
    dragging: false,
    initialTop: 0,
    initialLeft: 0,
    offsetTop: null,
    offsetLeft: null,
    xPosition: 0,
    eventHasChanged: false,
    width: null,
    height: null,
    zIndex: 2,
    border: '',
    meta: {},
    isDragging: false,
    endAt: undefined,
};
const initEventButtonPosition = (type, day, event, store, setLayout, index) => {
    var _a, _b;
    const { daysViewLayout, headerLayout, monthLayout } = store;
    if (type === enums_1.EVENT_TYPE.NORMAL && day) {
        const formattedDayString = (0, common_1.formatDateTimeToString)(day);
        const eventLayoutValue = (_a = daysViewLayout[formattedDayString]) === null || _a === void 0 ? void 0 : _a[event.id];
        if (eventLayoutValue) {
            setLayout(eventLayoutValue);
        }
    }
    else if (type === enums_1.EVENT_TYPE.HEADER) {
        if (store.headerLayout) {
            const headerLayoutValue = headerLayout[event.id];
            if (headerLayoutValue) {
                setLayout(headerLayoutValue);
            }
        }
    }
    else if (type === enums_1.EVENT_TYPE.MONTH) {
        if (store.monthLayout && index !== undefined) {
            const monthLayoutValue = (_b = monthLayout === null || monthLayout === void 0 ? void 0 : monthLayout[index]) === null || _b === void 0 ? void 0 : _b[event.id];
            if (monthLayoutValue) {
                setLayout(monthLayoutValue);
            }
        }
    }
    else {
        setLayout((0, exports.createTempMonthEventsLayout)());
    }
};
exports.initEventButtonPosition = initEventButtonPosition;
const disableTouchDragging = (e) => {
    var _a, _b;
    const touches = (_b = (_a = e.nativeEvent) === null || _a === void 0 ? void 0 : _a.touches) === null || _b === void 0 ? void 0 : _b[0];
    return !!touches;
};
exports.disableTouchDragging = disableTouchDragging;
