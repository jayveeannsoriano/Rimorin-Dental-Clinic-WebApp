"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const enums_1 = require("../../common/enums");
const store_1 = require("../../context/store");
const common_1 = require("../../utils/common");
const react_1 = require("react");
const useDeepCompareEffect_1 = require("../../utils/useDeepCompareEffect");
const AgendaDayRow_1 = __importDefault(require("./agendaDayRow/AgendaDayRow"));
const layout_1 = __importDefault(require("../../layout"));
const luxonHelper_1 = __importStar(require("../../utils/luxonHelper"));
const renderAgendaEvents = (events, calendarDays, isDark, selectedDate, monthInView) => {
    let scrollToSet = false;
    let hasNoEvents = false;
    const result = calendarDays.map((calendarDay) => {
        const hasEvents = !!events[calendarDay.toFormat(luxonHelper_1.EVENTS_DAY_FORMAT)];
        let scrollToThis = false;
        if (hasEvents) {
            if (!hasNoEvents) {
                hasNoEvents = true;
            }
            if (selectedDate &&
                luxonHelper_1.default.isNearDateOrInFuture(selectedDate, calendarDay) &&
                (!monthInView ||
                    (monthInView && luxonHelper_1.default.isSameMonth(selectedDate, monthInView)))) {
                scrollToSet = true;
                scrollToThis = true;
            }
            else if (!scrollToSet &&
                !scrollToThis &&
                (!monthInView ||
                    (monthInView &&
                        selectedDate &&
                        !luxonHelper_1.default.isSameMonth(selectedDate, monthInView)))) {
                const element = document.querySelector('.Kalend__Agenda__container');
                element === null || element === void 0 ? void 0 : element.scrollTo({ top: 0 });
            }
            return ((0, jsx_runtime_1.jsx)(AgendaDayRow_1.default, { scrollToThis: scrollToThis, day: calendarDay, events: events[calendarDay.toFormat(luxonHelper_1.EVENTS_DAY_FORMAT)] }, calendarDay.toString()));
        }
    });
    if (!hasNoEvents) {
        return ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: 'Kalend__Agenda__container-empty' }, { children: (0, jsx_runtime_1.jsx)("div", Object.assign({ className: 'Kalend__Agenda__container-inner' }, { children: (0, jsx_runtime_1.jsx)("h4", Object.assign({ className: (0, common_1.parseCssDark)('Kalend__Agenda__text-empty', isDark) }, { children: "No events" })) })) })));
    }
    return result;
};
const AgendaView = (props) => {
    const { events, eventLayouts } = props;
    const [monthInView, setMonthInView] = (0, react_1.useState)(null);
    const [calendarContent, setCalendarContent] = (0, react_1.useState)(null);
    const [store, dispatch] = (0, react_1.useContext)(store_1.Context);
    const setContext = (type, payload) => {
        dispatch({ type, payload });
    };
    const { calendarDays, width, height, config, selectedDate } = store;
    const { isDark } = config;
    const hasExternalLayout = eventLayouts !== undefined;
    (0, react_1.useEffect)(() => {
        if (!hasExternalLayout) {
            (0, layout_1.default)({
                events,
                selectedView: enums_1.CALENDAR_VIEW.AGENDA,
                height,
                width,
                calendarDays: [],
                config: store.config,
            }).then((res) => {
                setContext('layoutUpdateSequence', store.layoutUpdateSequence + 1);
                const content = renderAgendaEvents(res.events, calendarDays, isDark, selectedDate, monthInView);
                setCalendarContent(content);
            });
        }
    }, [calendarDays[0], config.timezone]);
    (0, react_1.useEffect)(() => {
        if (!monthInView) {
            setMonthInView(calendarDays[15]);
        }
    }, []);
    (0, useDeepCompareEffect_1.useDeepCompareEffect)(() => {
        // don't need to call this immediately
        if (monthInView) {
            if (!hasExternalLayout) {
                (0, layout_1.default)({
                    events,
                    selectedView: enums_1.CALENDAR_VIEW.AGENDA,
                    height,
                    width,
                    calendarDays: [],
                    config: store.config,
                }).then((res) => {
                    setContext('layoutUpdateSequence', store.layoutUpdateSequence + 1);
                    const content = renderAgendaEvents(res.events, calendarDays, isDark, selectedDate, monthInView);
                    setCalendarContent(content);
                });
            }
        }
    }, [events]);
    (0, useDeepCompareEffect_1.useDeepCompareEffect)(() => {
        var _a;
        if (hasExternalLayout &&
            (0, common_1.getSelectedViewType)(props.eventLayouts.selectedView) ===
                enums_1.CALENDAR_VIEW.AGENDA) {
            setContext('layoutUpdateSequence', store.layoutUpdateSequence + 1);
            const content = renderAgendaEvents((_a = props.eventLayouts) === null || _a === void 0 ? void 0 : _a.events, calendarDays, isDark, selectedDate, monthInView);
            setCalendarContent(content);
        }
    }, [props.eventLayouts]);
    return ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: 'Kalend__Agenda__container', style: { height: '100%' } }, { children: calendarContent })));
};
exports.default = AgendaView;
