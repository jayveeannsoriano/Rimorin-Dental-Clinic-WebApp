"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const store_1 = require("../../../context/store");
const luxon_1 = require("luxon");
const enums_1 = require("../../../common/enums");
const common_1 = require("../../../utils/common");
const react_1 = require("react");
const DateWeekDay_1 = __importDefault(require("../../dateWeekDay/DateWeekDay"));
const DayOfWeekText_1 = __importDefault(require("../../dayOfWeekText/DayOfWeekText"));
const EventButton_1 = __importDefault(require("../../eventButton/EventButton"));
const renderEvents = (events, timezone) => {
    if (!events || events.length === 0) {
        return [];
    }
    const allDayEvents = [];
    const normalEvents = [];
    events === null || events === void 0 ? void 0 : events.forEach((item) => {
        if (item.allDay) {
            allDayEvents.push(item);
        }
        else {
            normalEvents.push(item);
        }
    });
    let sortedEvents = normalEvents === null || normalEvents === void 0 ? void 0 : normalEvents.sort((a, b) => {
        return (luxon_1.DateTime.fromISO(a.startAt).setZone(timezone).toMillis() -
            luxon_1.DateTime.fromISO(b.startAt).setZone(timezone).toMillis());
    });
    sortedEvents = [...allDayEvents, ...sortedEvents];
    return sortedEvents.map((event) => {
        return ((0, jsx_runtime_1.jsx)(EventButton_1.default, { item: { event }, type: enums_1.EVENT_TYPE.AGENDA }, `${event.id}${event.internalID ? event.internalID : ''}`));
    });
};
const AgendaDayRow = (props) => {
    const { day, events, scrollToThis } = props;
    const [store] = (0, react_1.useContext)(store_1.Context);
    const dayEvents = renderEvents(events, store.config.timezone);
    (0, react_1.useEffect)(() => {
        if (!store.config.autoScroll) {
            return;
        }
        if (scrollToThis) {
            const element = document.getElementById(day.toString());
            if (element) {
                element.scrollIntoView();
            }
        }
    }, []);
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: (0, common_1.parseCssDark)('Kalend__AgendaDayRow__container', store.isDark), id: day.toString() }, { children: [(0, jsx_runtime_1.jsxs)("div", Object.assign({ className: 'Kalend__AgendaDayRow__container-day' }, { children: [(0, jsx_runtime_1.jsx)(DayOfWeekText_1.default, { day: day, width: 50 }), (0, jsx_runtime_1.jsx)(DateWeekDay_1.default, { width: 50, day: day })] })), (0, jsx_runtime_1.jsx)("div", Object.assign({ className: 'Kalend__AgendaDayRow__events' }, { children: dayEvents }))] })));
};
exports.default = AgendaDayRow;
