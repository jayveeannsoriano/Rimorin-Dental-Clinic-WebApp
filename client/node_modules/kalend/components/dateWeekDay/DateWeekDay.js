"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const enums_1 = require("../../common/enums");
const store_1 = require("../../context/store");
const luxon_1 = require("luxon");
const common_1 = require("../../utils/common");
const react_1 = require("react");
const luxonHelper_1 = __importDefault(require("../../utils/luxonHelper"));
const DateWeekDay = (props) => {
    const { width, day } = props;
    const [store, dispatch] = (0, react_1.useContext)(store_1.Context);
    const setContext = (type, payload) => {
        dispatch({ type, payload });
    };
    const { selectedView, callbacks } = store;
    const isDayToday = luxonHelper_1.default.isToday(day);
    const isMonthView = selectedView === enums_1.CALENDAR_VIEW.MONTH;
    const isAgendaView = selectedView === enums_1.CALENDAR_VIEW.AGENDA;
    const isInPast = isMonthView && !day.hasSame(luxon_1.DateTime.now(), 'month');
    const navigateToDay = (e) => {
        if (props.setViewChanged) {
            e.preventDefault();
            e.stopPropagation();
            props.setViewChanged(enums_1.CALENDAR_VIEW.DAY);
            setContext('selectedDate', day);
            setContext('calendarDays', [day]);
        }
    };
    const handleNewEventClick = (event) => {
        if (callbacks.onNewEventClick) {
            callbacks.onNewEventClick({
                day: day.toJSDate(),
                hour: day.toUTC().hour,
                startAt: day === null || day === void 0 ? void 0 : day.setZone(store.config.timezone).startOf('day').toUTC().toString(),
                endAt: day === null || day === void 0 ? void 0 : day.setZone(store.config.timezone).endOf('day').toUTC().toString(),
                event,
                view: selectedView,
            }, event);
        }
    };
    const getBackgroundColor = () => {
        if (!store.isDark) {
            if (isDayToday) {
                return store.colors.light.primaryColor;
            }
        }
        else {
            if (isDayToday) {
                return store.colors.dark.primaryColor;
            }
        }
    };
    return ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: 'Kalend__CalendarHeaderDates__col', style: { width }, onClick: handleNewEventClick }, { children: (0, jsx_runtime_1.jsx)("div", Object.assign({ className: `${(0, common_1.parseCssDark)(`Kalend__CalendarHeaderDates__circle${isMonthView ? '-small' : ''}`, store.isDark)} ${isDayToday ? 'Kalend__CalendarHeaderDates__primary' : ''} ${isAgendaView
                ? isDayToday
                    ? 'Kalend__CalendarHeaderDates__agenda-primary'
                    : 'Kalend__CalendarHeaderDates__agenda'
                : ''}`, onClick: navigateToDay, style: {
                backgroundColor: getBackgroundColor(),
                cursor: props.setViewChanged ? 'pointer' : 'normal',
            } }, { children: (0, jsx_runtime_1.jsx)("p", Object.assign({ className: `Kalend__text Kalend__CalendarHeaderDates__text ${selectedView === enums_1.CALENDAR_VIEW.MONTH
                    ? 'Kalend__CalendarHeaderDates__text-size-small'
                    : ''} ${isDayToday
                    ? (0, common_1.parseCssDark)('Kalend__color-text-base', !store.isDark)
                    : (0, common_1.parseCssDark)(`Kalend__color-text-base${isInPast ? '-grayed' : ''}`, store.isDark)}` }, { children: day.day })) })) })));
};
exports.default = DateWeekDay;
