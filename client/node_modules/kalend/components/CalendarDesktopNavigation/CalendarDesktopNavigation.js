"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const enums_1 = require("../../common/enums");
const store_1 = require("../../context/store");
const luxon_1 = require("luxon");
const eva_icons_1 = require("../eva-icons");
const getCalendarDays_1 = require("../../utils/getCalendarDays");
const common_1 = require("../../utils/common");
const dateTimeParser_1 = require("../../utils/dateTimeParser");
const react_1 = require("react");
const ButtonBase_1 = __importDefault(require("../buttonBase/ButtonBase"));
const ButtonIcon_1 = __importDefault(require("../buttonIcon/ButtonIcon"));
const CalendarViewDropdown_1 = __importDefault(require("../calendarViewDropdown/CalendarViewDropdown"));
const DesktopLayout_1 = __importDefault(require("../desktopLayout/DesktopLayout"));
const HeaderCalendarButtons_1 = __importDefault(require("../headerCalendarButtons/HeaderCalendarButtons"));
const HeaderCalendarTitle_1 = __importDefault(require("../headerCalendarTitle/HeaderCalendarTitle"));
const MobileLayout_1 = __importDefault(require("../mobileLayout/MobileLayout"));
/**
 * Title with calendar navigation buttons for desktop layout
 * @param props
 * @constructor
 */
const CalendarDesktopNavigation = (props) => {
    const [store, dispatch] = (0, react_1.useContext)(store_1.Context);
    const setContext = (type, payload) => {
        dispatch({ type, payload });
    };
    const { config, calendarDays, selectedView, selectedDate, isMobile, width, translations, } = store;
    const { weekDayStart, isDark } = config;
    const [isFullNavigationHidden, setIsFullNavigationHidden] = (0, react_1.useState)(true);
    const titleDate = (0, dateTimeParser_1.parseToDateTime)(selectedDate, config.timezone);
    const title = `${translations['months'][`${titleDate.toFormat('MMMM').toLowerCase()}`]} ${titleDate.toFormat('yyyy')}`;
    const navigateBackwards = () => __awaiter(void 0, void 0, void 0, function* () {
        setContext('calendarContent', null);
        setContext('direction', enums_1.CALENDAR_NAVIGATION_DIRECTION.BACKWARDS);
        (0, getCalendarDays_1.getNewCalendarDays)(calendarDays, selectedView, enums_1.CALENDAR_NAVIGATION_DIRECTION.BACKWARDS, weekDayStart, setContext);
    });
    const navigateForward = () => __awaiter(void 0, void 0, void 0, function* () {
        setContext('calendarContent', null);
        setContext('direction', enums_1.CALENDAR_NAVIGATION_DIRECTION.FORWARD);
        (0, getCalendarDays_1.getNewCalendarDays)(calendarDays, selectedView, enums_1.CALENDAR_NAVIGATION_DIRECTION.FORWARD, weekDayStart, setContext);
    });
    const navigateToTodayDate = () => __awaiter(void 0, void 0, void 0, function* () {
        setContext('calendarContent', null);
        setContext('direction', enums_1.CALENDAR_NAVIGATION_DIRECTION.TODAY);
        yield (0, getCalendarDays_1.navigateToToday)(selectedView, setContext, weekDayStart, luxon_1.DateTime.now());
    });
    // handle showing  full desktop navigation panel or dropdown for
    // different screen size
    (0, react_1.useEffect)(() => {
        const element = document.querySelector((0, common_1.parseCssDark)('.Kalend__CalendarDesktopNavigation__container', isDark));
        if (element) {
            if (element) {
                if (element.getBoundingClientRect().width <= 950) {
                    setIsFullNavigationHidden(true);
                }
                else {
                    setIsFullNavigationHidden(false);
                }
            }
        }
    }, [width]);
    // add funcs to ref
    (0, react_1.useEffect)(() => {
        if (props.kalendRef) {
            props.kalendRef.current = {
                navigateToTodayDate,
                navigateForward,
                navigateBackwards,
            };
        }
    }, []);
    (0, react_1.useEffect)(() => {
        if (props.kalendRef) {
            props.kalendRef.current = {
                navigateToTodayDate,
                navigateForward,
                navigateBackwards,
            };
        }
    }, [selectedView, calendarDays[0].toString()]);
    return props.kalendRef ? null : ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: (0, common_1.parseClassName)('Kalend__CalendarDesktopNavigation__container', isMobile, isDark) }, { children: [(0, jsx_runtime_1.jsxs)("div", Object.assign({ style: {
                    display: 'flex',
                    flexDirection: 'row',
                    width: isMobile ? '100%' : 'auto',
                } }, { children: [(0, jsx_runtime_1.jsx)(DesktopLayout_1.default, { children: (0, jsx_runtime_1.jsx)("div", Object.assign({ className: 'Kalend__CalendarDesktopNavigation__buttons' }, { children: (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(ButtonBase_1.default, Object.assign({ className: (0, common_1.parseCssDark)('Kalend__ButtonBase-border', isDark), isDark: isDark, onClick: navigateToTodayDate }, { children: translations['buttons']['today'] })), (0, jsx_runtime_1.jsx)(ButtonIcon_1.default, Object.assign({ isDark: isDark, onClick: navigateBackwards }, { children: (0, jsx_runtime_1.jsx)(eva_icons_1.EvaIcons.ChevronLeft, { className: (0, common_1.parseCssDark)('Kalend__icon-svg', isDark) }) }), 'left'), (0, jsx_runtime_1.jsx)(ButtonIcon_1.default, Object.assign({ isDark: isDark, onClick: navigateForward }, { children: (0, jsx_runtime_1.jsx)(eva_icons_1.EvaIcons.ChevronRight, { className: (0, common_1.parseCssDark)('Kalend__icon-svg', isDark) }) }), 'right')] }) })) }), (0, jsx_runtime_1.jsx)(HeaderCalendarTitle_1.default, { title: title }), (0, jsx_runtime_1.jsx)(MobileLayout_1.default, Object.assign({ style: { width: '100%' } }, { children: (0, jsx_runtime_1.jsx)("div", Object.assign({ className: 'Kalend__CalendarDesktopNavigation__buttons' }, { children: (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(ButtonIcon_1.default, Object.assign({ isDark: isDark, onClick: navigateBackwards }, { children: (0, jsx_runtime_1.jsx)(eva_icons_1.EvaIcons.ChevronLeft, { className: (0, common_1.parseCssDark)('Kalend__icon-svg', isDark) }) }), 'left'), (0, jsx_runtime_1.jsx)(ButtonIcon_1.default, Object.assign({ isDark: isDark, onClick: navigateForward }, { children: (0, jsx_runtime_1.jsx)(eva_icons_1.EvaIcons.ChevronRight, { className: (0, common_1.parseCssDark)('Kalend__icon-svg', isDark) }) }), 'right'), (0, jsx_runtime_1.jsx)(ButtonIcon_1.default, Object.assign({ isDark: isDark, onClick: navigateToTodayDate }, { children: (0, jsx_runtime_1.jsx)(eva_icons_1.EvaIcons.Calendar, { className: (0, common_1.parseCssDark)('Kalend__icon-svg', isDark) }) }), 'calendar'), (0, jsx_runtime_1.jsx)(CalendarViewDropdown_1.default, { disabledViews: props.disabledViews, setViewChanged: props.setViewChanged, disableMobileDropdown: props.disableMobileDropdown })] }) })) }))] })), (0, jsx_runtime_1.jsx)("div", Object.assign({ style: {
                    display: 'flex',
                    flexDirection: 'row',
                    marginRight: 12,
                    justifyContent: 'flex-end',
                    flex: 'auto',
                } }, { children: (0, jsx_runtime_1.jsx)(DesktopLayout_1.default, { children: isFullNavigationHidden ? ((0, jsx_runtime_1.jsx)(CalendarViewDropdown_1.default, { disabledViews: props.disabledViews, setViewChanged: props.setViewChanged, disableMobileDropdown: props.disableMobileDropdown })) : ((0, jsx_runtime_1.jsx)(HeaderCalendarButtons_1.default, { disabledViews: props.disabledViews, setViewChanged: props.setViewChanged })) }) }))] })));
};
exports.default = CalendarDesktopNavigation;
