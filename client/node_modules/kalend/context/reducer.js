"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:cyclomatic-complexity
const Reducer = (state, action) => {
    switch (action.type) {
        case 'initialView':
            return Object.assign(Object.assign({}, state), { initialView: action.payload });
        case 'selectedView':
            return Object.assign(Object.assign({}, state), { selectedView: action.payload });
        case 'draggingDisabledConditions':
            return Object.assign(Object.assign({}, state), { draggingDisabledConditions: action.payload });
        case 'isMobile':
            return Object.assign(Object.assign({}, state), { isMobile: action.payload });
        case 'isDark':
            return Object.assign(Object.assign({}, state), { isDark: action.payload });
        case 'isNewEventOpen':
            return Object.assign(Object.assign({}, state), { isNewEventOpen: action.payload });
        case 'showWeekNumbers':
            return Object.assign(Object.assign({}, state), { showWeekNumbers: action.payload });
        case 'translations':
            return Object.assign(Object.assign({}, state), { translations: action.payload });
        case 'style':
            return Object.assign(Object.assign({}, state), { style: action.payload });
        case 'direction':
            return Object.assign(Object.assign({}, state), { direction: action.payload });
        case 'daysViewLayout':
            return Object.assign(Object.assign({}, state), { daysViewLayout: action.payload });
        case 'config':
            return Object.assign(Object.assign({}, state), { config: action.payload });
        case 'colors':
            return Object.assign(Object.assign({}, state), { colors: action.payload });
        case 'headerLayout':
            return Object.assign(Object.assign({}, state), { headerLayout: action.payload });
        case 'monthLayout':
            return Object.assign(Object.assign({}, state), { monthLayout: action.payload });
        case 'monthOverflowEvents':
            return Object.assign(Object.assign({}, state), { monthOverflowEvents: action.payload });
        case 'showMoreEvents':
            return Object.assign(Object.assign({}, state), { showMoreEvents: action.payload });
        case 'layoutUpdateSequence':
            return Object.assign(Object.assign({}, state), { layoutUpdateSequence: action.payload });
        case 'events':
            return Object.assign(Object.assign({}, state), { events: action.payload });
        case 'selectedDate':
            return Object.assign(Object.assign({}, state), { selectedDate: action.payload });
        case 'calendarDays':
            return Object.assign(Object.assign({}, state), { calendarDays: action.payload });
        case 'isLoading':
            return Object.assign(Object.assign({}, state), { isLoading: action.payload });
        case 'rawWidth':
            return Object.assign(Object.assign({}, state), { rawWidth: action.payload });
        case 'width':
            return Object.assign(Object.assign({}, state), { width: action.payload });
        case 'height':
            return Object.assign(Object.assign({}, state), { height: action.payload });
        case 'callbacks':
            return Object.assign(Object.assign({}, state), { callbacks: action.payload });
        case 'headerEventRowsCount':
            return Object.assign(Object.assign({}, state), { headerEventRowsCount: action.payload });
        default:
            return state;
    }
};
exports.default = Reducer;
