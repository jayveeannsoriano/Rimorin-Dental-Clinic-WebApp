"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.navigateToToday = exports.getNewCalendarDays = void 0;
const enums_1 = require("../common/enums");
const luxon_1 = require("luxon");
const calendarDays_1 = require("./calendarDays");
/**
 * Calculate new calendar days
 * @param calendarDays
 * @param calendarView
 * @param direction
 * @param weekDayStart
 * @param dispatchContext
 */
const getNewCalendarDays = (calendarDays, calendarView, direction, weekDayStart, dispatchContext) => {
    const setSelectedDate = (date) => {
        if (dispatchContext) {
            dispatchContext('selectedDate', date);
        }
    };
    const newCalendarDays = (0, calendarDays_1.calculateCalendarDays)(direction, calendarDays, calendarView, setSelectedDate, weekDayStart);
    if (dispatchContext) {
        dispatchContext('calendarDays', newCalendarDays);
    }
    return newCalendarDays;
    // dispatchContext(
    //   'selectedDate',
    //   newCalendarDays[chooseSelectedDateIndex(calendarView)]
    // );
};
exports.getNewCalendarDays = getNewCalendarDays;
const navigateToToday = (selectedView, setContext, weekDayStart, dateNow = luxon_1.DateTime.now()) => __awaiter(void 0, void 0, void 0, function* () {
    (0, exports.getNewCalendarDays)([dateNow], selectedView, enums_1.CALENDAR_NAVIGATION_DIRECTION.TODAY, weekDayStart, setContext);
});
exports.navigateToToday = navigateToToday;
