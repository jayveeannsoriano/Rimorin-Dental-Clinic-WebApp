import { CALENDAR_VIEW, TIME_FORMAT } from '../common/enums';
import { CalendarEvent, DraggingDisabledConditions } from '../common/interface';
import { DateTime } from 'luxon';
export declare const parseCssDark: (className: string, isDark: boolean | undefined) => string;
export declare const parseIsMobile: (className: string, isMobile: boolean) => string;
export declare const parseClassName: (className: string, isMobile?: boolean, isDark?: boolean) => string;
export declare const formatTimestampToDate: (dateObj: any) => string;
export declare const formatDateTimeToString: (dateObj: DateTime) => string;
/**
 * Get left offset for timetable when hours column in used
 * @param calendarView
 * @param showWeekNumbers
 */
export declare const getTableOffset: (calendarView: CALENDAR_VIEW, showWeekNumbers?: boolean) => number;
export declare const getArrayStart: (array: any) => any;
export declare const getArrayEnd: (array: any) => any;
export declare const getDayTimeStart: (date: DateTime) => string;
export declare const getDayTimeEnd: (date: DateTime) => string;
export declare const isAllDayEvent: (item: CalendarEvent, timezone: string) => boolean;
export declare const parseCalendarViewToText: (calendarView: CALENDAR_VIEW, translations: any) => string;
export declare const getSelectedViewType: (calendarView: CALENDAR_VIEW) => string;
export declare const eventsToArray: (events: any) => CalendarEvent[];
export declare const eventsToDateKey: (events: CalendarEvent[], timezone: string) => any;
/**
 * Adjust width for views with displayed scrollbar cutting of space
 * @param width
 * @param isMobile
 * @param selectedView
 */
export declare const getCorrectWidth: (width: number, isMobile: boolean, selectedView: CALENDAR_VIEW) => number;
export declare const createVerticalHours: (timeFormat: TIME_FORMAT) => string[];
export declare const checkIfDraggable: (draggingDisabledConditions: DraggingDisabledConditions | null, event: CalendarEvent) => boolean;
export declare const isSameMonth: (date?: DateTime) => boolean;
