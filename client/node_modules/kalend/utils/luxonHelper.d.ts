import { DateTime } from 'luxon';
export declare const TIMESTAMP_FORMAT = "yyyy-MM-dd HH:mm:ss 'Z'";
export declare const DATE_HOUR_FORMAT = "d. MMM, HH:mm";
export declare const DATE_FORMAT = "d. MMMM";
export declare const TIME_FORMAT = "HH:mm";
export declare const DATE_DAY_FORMAT = "d. MMMM (EEEEEE)";
export declare const WEEK_DAY_FORMAT = "cccc";
export declare const WEEK_DAY_FORMAT_MEDIUM = "ccc";
export declare const WEEK_DAY_FORMAT_SHORT = "EEEEEE";
export declare const DATE_MONTH_YEAR_FORMAT = "d. MMMM yyyy";
export declare const EVENTS_DAY_FORMAT = "dd-MM-yyyy";
/**
 * Parse datetime according different rules like local datetime, floating time and timezones
 * @param date
 * @param zone
 * @param deviceTimezone
 * @constructor
 */
export declare const DatetimeParser: (date: DateTime | string, zone: string, deviceTimezone?: string) => string;
declare const LuxonHelper: {
    parseToDateTime: (date: string | DateTime) => DateTime;
    getLastDayOfMonth: (date: DateTime) => DateTime;
    getFirstDayOfMonth: (date: DateTime) => DateTime;
    isSameDay: (dateA: DateTime, dateB: DateTime) => boolean;
    isBefore: (dateA: string, dateB: string) => boolean;
    isBeforeInDateTime: (dateA: DateTime, dateB: DateTime) => boolean;
    isBeforeAny: (dateA: string, dateB: string) => boolean;
    isToday: (dateA: DateTime) => boolean;
    isTodayOrInFuture: (dateA: DateTime) => boolean;
    isSameMonth: (dateA: DateTime, dateB: DateTime) => boolean;
    isNearDateOrInFuture: (selectedDate: DateTime, calendarDay: DateTime) => boolean;
    isCurrentMonth: (dateA: DateTime) => boolean;
    parseToString: (date: DateTime | string) => string;
    toUtcString: (date: string) => string;
    toUtc: (date: DateTime) => string;
    setTimezone: (dateString: string, timezone: string) => string;
    toHumanDate: (dateString: string) => string;
};
export default LuxonHelper;
