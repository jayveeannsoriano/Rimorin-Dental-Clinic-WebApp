"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRange = exports.calculateCalendarDays = exports.getCalendarDays = exports.chooseSelectedDateIndex = exports.checkIfSwipingForward = exports.parseDateToString = exports.parseToDate = exports.getMonthDays = exports.getAgendaDays = exports.calculateMonthDays = exports.calculateAgendaDays = exports.getDaysNum = exports.getThreeDays = exports.getWeekDays = exports.calculateOneDay = exports.daysTextSundayStart = exports.daysText = exports.parseEventColor = exports.calendarColors = exports.hoursArrayString = exports.hoursArray = exports.formatIsoStringDate = void 0;
/* tslint:disable:no-magic-numbers */
const enums_1 = require("../common/enums");
const luxon_1 = require("luxon");
const common_1 = require("./common");
const luxonHelper_1 = __importDefault(require("./luxonHelper"));
const ONE_DAY = 1;
const THREE_DAYS = 3;
const SEVEN_DAYS = 7;
const formatIsoStringDate = (stringDate) => stringDate.slice(0, stringDate.indexOf('T'));
exports.formatIsoStringDate = formatIsoStringDate;
exports.hoursArray = [
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
    22, 23, 24,
];
exports.hoursArrayString = [
    '00',
    '01',
    '02',
    '03',
    '04',
    '05',
    '06',
    '07',
    '08',
    '09',
    '10',
    '11',
    '12',
    '13',
    '14',
    '15',
    '16',
    '17',
    '18',
    '19',
    '20',
    '21',
    '22',
    '23',
];
exports.calendarColors = {
    red: { dark: '#ef9a9a', light: '#e53935' },
    pink: { dark: '#f48fb1', light: '#d81b60' },
    purple: { dark: '#ce93d8', light: '#8e24aa' },
    'deep purple': { dark: '#b39ddb', light: '#5e35b1' },
    indigo: { dark: '#9fa8da', light: '#3949ab' },
    blue: { dark: '#90caf9', light: '#1e88e5' },
    'light blue': { dark: '#81d4fa', light: '#039be5' },
    cyan: { dark: '#80deea', light: '#00acc1' },
    teal: { dark: '#80cbc4', light: '#00897b' },
    green: { dark: '#a5d6a7', light: '#43a047' },
    'light green': { dark: '#c5e1a5', light: '#7cb342' },
    yellow: { dark: '#fff59d', light: '#fdd835' },
    amber: { dark: '#ffe082', light: '#ffb300' },
    orange: { dark: '#ffcc80', light: '#fb8c00' },
    'deep orange': { dark: '#ffab91', light: '#f4511e' },
    brown: { dark: '#bcaaa4', light: '#6d4c41' },
    'blue grey': { dark: '#b0bec5', light: '#546e7a' },
};
const parseEventColor = (colorString, isDark) => exports.calendarColors[colorString]
    ? exports.calendarColors[colorString][isDark ? 'dark' : 'light']
    : colorString;
exports.parseEventColor = parseEventColor;
exports.daysText = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
exports.daysTextSundayStart = [
    'Sun',
    'Mon',
    'Tue',
    'Wed',
    'Thu',
    'Fri',
    'Sat',
];
const calculateOneDay = (date) => {
    return date;
};
exports.calculateOneDay = calculateOneDay;
const calculateMondayStartWeekDay = (date, calendarView) => {
    const days = [];
    const dayInWeek = Number(date.weekday);
    const startDate = date.minus({ days: dayInWeek - 1 });
    if (calendarView === enums_1.CALENDAR_VIEW.MONTH) {
        if (dayInWeek === 0) {
            for (let i = 6; i > 0; i--) {
                days.push(date.minus({ days: i }));
            }
            days.push(date);
        }
        else {
            days.push(startDate);
            for (let i = 1; i < 7; i++) {
                days.push(startDate.plus({ days: i }));
            }
        }
    }
    else {
        for (let i = 0; i < 7; i++) {
            days.push(startDate.plus({ days: i }));
        }
    }
    return days;
};
const calculateSundayStartWeekDay = (date, calendarView) => {
    const days = [];
    const dayInWeek = date.weekday;
    const startDate = dayInWeek === 7
        ? date.plus({ days: dayInWeek - 7 })
        : date.minus({ days: dayInWeek });
    if (calendarView === enums_1.CALENDAR_VIEW.MONTH) {
        if (dayInWeek === 7) {
            for (let i = 6; i > 0; i--) {
                days.push(date.minus({ days: i }));
            }
            days.push(date);
        }
        else {
            days.push(startDate);
            for (let i = 1; i < 7; i++) {
                days.push(startDate.plus({ days: i }));
            }
        }
    }
    else {
        for (let i = 0; i < 7; i++) {
            days.push(startDate.plus({ days: i }));
        }
    }
    return days;
};
const getWeekDays = (date, calendarView, weekDayStart, setSelectedDate) => {
    // Set state
    if (setSelectedDate && calendarView !== enums_1.CALENDAR_VIEW.MONTH) {
        setSelectedDate(date);
    }
    if (weekDayStart === enums_1.WEEKDAY_START.MONDAY) {
        return calculateMondayStartWeekDay(date, calendarView);
    }
    else {
        return calculateSundayStartWeekDay(date, calendarView);
    }
};
exports.getWeekDays = getWeekDays;
const getThreeDays = (date, setSelectedDate, isGoingForward, isChangingView) => {
    const days = [];
    if (isChangingView) {
        for (let i = 0; i <= 2; i++) {
            days.push(date.plus({ days: i }));
        }
        // Set state
        if (setSelectedDate) {
            setSelectedDate(days[0]);
        }
    }
    else if (isGoingForward === null || isGoingForward === undefined) {
        for (let i = 0; i <= 2; i++) {
            days.push(date.plus({ days: i }));
        }
    }
    else if (isGoingForward) {
        for (let i = 1; i <= 3; i++) {
            days.push(date.plus({ days: i }));
        }
    }
    else {
        for (let i = 3; i > 0; i--) {
            days.push(date.minus({ days: i }));
        }
    }
    if (!isChangingView) {
        // Set state
        if (setSelectedDate) {
            setSelectedDate(days[1]);
        }
    }
    return days;
};
exports.getThreeDays = getThreeDays;
const getDaysNum = (calendarView) => {
    switch (calendarView) {
        case enums_1.CALENDAR_VIEW.WEEK:
            return SEVEN_DAYS;
        case enums_1.CALENDAR_VIEW.THREE_DAYS:
            return THREE_DAYS;
        case enums_1.CALENDAR_VIEW.DAY:
            return ONE_DAY;
        default:
            return SEVEN_DAYS;
    }
};
exports.getDaysNum = getDaysNum;
const getOneDay = (date, setSelectedDate) => {
    const refDate = (0, exports.calculateOneDay)(date);
    // Set state
    if (setSelectedDate) {
        setSelectedDate(refDate);
    }
    return [refDate];
};
const calculateAgendaDays = (refDate) => {
    const firstDayInMonth = luxonHelper_1.default.getFirstDayOfMonth(refDate);
    const daysInMonth = refDate.daysInMonth;
    const monthDays = [];
    // Add missing days to month view
    for (let i = 0; i < daysInMonth; i += 1) {
        const day = firstDayInMonth.plus({ days: i });
        monthDays.push(day);
    }
    return monthDays;
};
exports.calculateAgendaDays = calculateAgendaDays;
const calculateMonthDays = (date, weekDayStart) => {
    const FIVE_WEEKS_DAYS_COUNT = 36;
    // Get reference date for calculating new month
    // Get first week of current month
    const firstDayOfCurrentMonth = luxonHelper_1.default.getFirstDayOfMonth(date);
    const firstWeekOfCurrentMonth = (0, exports.getWeekDays)(firstDayOfCurrentMonth, enums_1.CALENDAR_VIEW.WEEK, weekDayStart, undefined);
    const monthDays = firstWeekOfCurrentMonth;
    // Add missing days to month view
    for (let i = 1; i < FIVE_WEEKS_DAYS_COUNT; i += 1) {
        const day = firstWeekOfCurrentMonth[6].plus({ days: i });
        monthDays.push(day);
    }
    return monthDays;
};
exports.calculateMonthDays = calculateMonthDays;
const getAgendaDays = (date, setSelectedDate) => {
    const monthDays = (0, exports.calculateAgendaDays)(date);
    // Set state
    if (setSelectedDate) {
        setSelectedDate(date);
    }
    return monthDays;
};
exports.getAgendaDays = getAgendaDays;
const getMonthDays = (date, setSelectedDate, weekDayStart, isChangingView) => {
    const monthDays = (0, exports.calculateMonthDays)(date, weekDayStart);
    // Set state
    if (setSelectedDate && !isChangingView) {
        setSelectedDate(monthDays[15]);
    }
    return monthDays;
};
exports.getMonthDays = getMonthDays;
// TODO dark theme support for parsing colors
// export const mapCalendarColors = (calendars: any) => {
//   const result: any = {};
//   for (const calendar of calendars) {
//     result[calendar.id] = {
//       color: {
//         light: calendar.color.light,
//         dark: calendar.color.dark,
//       },
//     };
//   }
//
//   return result;
// };
const parseToDate = (item) => typeof item === 'string' ? luxon_1.DateTime.fromISO(item) : item;
exports.parseToDate = parseToDate;
const parseDateToString = (item) => typeof item === 'string' ? item : item.toString();
exports.parseDateToString = parseDateToString;
const checkIfSwipingForward = (oldIndex, newIndex) => (oldIndex === 0 && newIndex === 1) ||
    (oldIndex === 1 && newIndex === 2) ||
    (oldIndex === 2 && newIndex === 0);
exports.checkIfSwipingForward = checkIfSwipingForward;
const chooseSelectedDateIndex = (calendarView) => {
    switch (calendarView) {
        case enums_1.CALENDAR_VIEW.MONTH:
            return 15;
        case enums_1.CALENDAR_VIEW.AGENDA:
            return 15;
        case enums_1.CALENDAR_VIEW.WEEK:
            return 2;
        case enums_1.CALENDAR_VIEW.THREE_DAYS:
            return 0;
        case enums_1.CALENDAR_VIEW.DAY:
            return 0;
        default:
            return 2;
    }
};
exports.chooseSelectedDateIndex = chooseSelectedDateIndex;
const getCalendarDays = (calendarView, date, weekDayStart, setSelectedDate, isChangingView) => {
    switch (calendarView) {
        case enums_1.CALENDAR_VIEW.WEEK:
            return (0, exports.getWeekDays)(date, calendarView, weekDayStart, setSelectedDate);
        case enums_1.CALENDAR_VIEW.THREE_DAYS:
            return (0, exports.getThreeDays)(date, setSelectedDate, undefined, isChangingView);
        case enums_1.CALENDAR_VIEW.DAY:
            return getOneDay(date, setSelectedDate);
        case enums_1.CALENDAR_VIEW.MONTH:
            return (0, exports.getMonthDays)(date, setSelectedDate, weekDayStart, isChangingView);
        case enums_1.CALENDAR_VIEW.AGENDA:
            return (0, exports.getAgendaDays)(date, setSelectedDate);
        default:
            return (0, exports.getWeekDays)(date, calendarView, setSelectedDate);
    }
};
exports.getCalendarDays = getCalendarDays;
const getReferenceDate = (direction, calendarView, calendarDays) => {
    if (direction === enums_1.CALENDAR_NAVIGATION_DIRECTION.TODAY) {
        return luxon_1.DateTime.now();
    }
    if (calendarView === enums_1.CALENDAR_VIEW.THREE_DAYS) {
        if (direction === enums_1.CALENDAR_NAVIGATION_DIRECTION.FORWARD) {
            return (0, common_1.getArrayEnd)(calendarDays).plus({ days: 1 });
        }
        else {
            return (0, common_1.getArrayStart)(calendarDays).minus({ days: 3 });
        }
    }
    if (calendarView === enums_1.CALENDAR_VIEW.WEEK ||
        calendarView === enums_1.CALENDAR_VIEW.DAY) {
        if (direction === enums_1.CALENDAR_NAVIGATION_DIRECTION.FORWARD) {
            return (0, common_1.getArrayEnd)(calendarDays).plus({ days: 1 });
        }
        else {
            return (0, common_1.getArrayStart)(calendarDays).minus({ days: 1 });
        }
    }
    if (calendarView === enums_1.CALENDAR_VIEW.MONTH ||
        calendarView === enums_1.CALENDAR_VIEW.AGENDA) {
        if (direction === enums_1.CALENDAR_NAVIGATION_DIRECTION.FORWARD) {
            return calendarDays[15].plus({ months: 1 });
        }
        else {
            return calendarDays[15].minus({ months: 1 });
        }
    }
    return luxon_1.DateTime.now();
};
const calculateCalendarDays = (direction, calendarDays, calendarView, setSelectedDate, weekDayStart) => {
    return (0, exports.getCalendarDays)(calendarView, getReferenceDate(direction, calendarView, calendarDays), weekDayStart, setSelectedDate);
};
exports.calculateCalendarDays = calculateCalendarDays;
const getRange = (calendarDays) => {
    var _a, _b, _c;
    return {
        rangeFrom: (_a = calendarDays === null || calendarDays === void 0 ? void 0 : calendarDays[0]) === null || _a === void 0 ? void 0 : _a.set({ hour: 0, minute: 0, second: 0, millisecond: 0 }).toUTC().toString(),
        rangeTo: (_c = (_b = calendarDays === null || calendarDays === void 0 ? void 0 : calendarDays[(calendarDays === null || calendarDays === void 0 ? void 0 : calendarDays.length) - 1]) === null || _b === void 0 ? void 0 : _b.set({ hour: 23, minute: 59, second: 59, millisecond: 59 })) === null || _c === void 0 ? void 0 : _c.toUTC().toString(),
    };
};
exports.getRange = getRange;
